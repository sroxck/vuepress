(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{662:function(t,s,a){"use strict";a.r(s);var e=a(58),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"object-是类层次结构的根类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-是类层次结构的根类"}},[t._v("#")]),t._v(" Object 是类层次结构的根类")]),t._v(" "),a("p",[t._v("每个类都是用Object作为超(根)类")]),t._v(" "),a("p",[t._v("直接打印对象的名字,其实就是调用对象的toString方法")]),t._v(" "),a("p",[t._v("看一个类是否重写了toString方法,直接打印类的对象即可,没有重写toString方法那么打印的是对象的地址值")]),t._v(" "),a("p",[t._v("比较运算符 ==\n基本数据类型 :比较的是值\n引用数据类型 :比较的是地址值")]),t._v(" "),a("h2",{attrs:{id:"object的equals方法比较的是地址值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object的equals方法比较的是地址值"}},[t._v("#")]),t._v(" Object的equals方法比较的是地址值")]),t._v(" "),a("p",[t._v("需要从写equals比较对象的属性值是否相等")]),t._v(" "),a("h2",{attrs:{id:"objects-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objects-类"}},[t._v("#")]),t._v(" Objects 类")]),t._v(" "),a("p",[t._v("在jdk 7中添加的工具类,提供一些操作对象的静态方法,主要是 null-save 空指针安全的 null-tolerant容忍空指针的 用于计算对象的hashcode 返回对象字符串表示形式,比较两个对象")]),t._v(" "),a("blockquote",[a("p",[t._v("null是不能调用方法的,用null调用方法就会抛出空指针异常")])]),t._v(" "),a("h3",{attrs:{id:"在比较两个类的时候-object的equals方法容易抛出空指针异常-而objects的equals方法优化了这个问题-可以判断两个对象是否相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在比较两个类的时候-object的equals方法容易抛出空指针异常-而objects的equals方法优化了这个问题-可以判断两个对象是否相等"}},[t._v("#")]),t._v(" 在比较两个类的时候,Object的equals方法容易抛出空指针异常,而Objects的equals方法优化了这个问题,可以判断两个对象是否相等")]),t._v(" "),a("p",[t._v("源码:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);