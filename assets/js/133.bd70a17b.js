(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{697:function(a,s,t){"use strict";t.r(s);var n=t(58),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"对象的向上转型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的向上转型"}},[a._v("#")]),a._v(" 对象的向上转型")]),a._v(" "),t("p",[a._v("对象的向上转型其实就是多态写法,父类引用指向子类对象\n格式: 父类名称 对象名 = new 子类名称();"),t("br"),a._v("\n含义: 右侧创建一个子类对象,把他当做父类来看待使用")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" animal "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 创建一只猫,当做动物看待")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意事项")]),a._v(" "),t("p",[a._v("向上转型一定是安全的,从小范围转向大范围\n但是也有一个弊端,一旦向上转型为父类,那么就无法调用子类特有方法\n解决方案,用对象的向下转型,还原")])]),a._v(" "),t("h1",{attrs:{id:"对象的向下转型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的向下转型"}},[a._v("#")]),a._v(" 对象的向下转型")]),a._v(" "),t("p",[a._v("对象的向下转型其实是一个还原的动作\n格式:子类名称 对象名 = (子类名称) 父类对象;\n含义:将父类对象,还原成本来的子类对象")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" animal "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 向上转型")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 创建一只猫,当做动物看待,本来是猫,向上转型为动物")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),a._v(" cat "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" animal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 向下转型")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 本来是猫,已经被当做动物了,还原回来成为本来的猫")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 注意: 必须保证对象本来创建的时候,就是猫,才能向下转型成为猫,如果对象创建的时候本来不是猫,向下转型为猫就会报错")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 向下转换类似于基本数据类型的强制转换,例如: int num = (int) 10.0 可以,int num = (int) 10.5  不可以,精度损失")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("h2",{attrs:{id:"如何才能知道一个父类引用的对象-本来是什么子类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何才能知道一个父类引用的对象-本来是什么子类"}},[a._v("#")]),a._v(" 如何才能知道一个父类引用的对象,本来是什么子类?")]),a._v(" "),t("h3",{attrs:{id:"使用instanceof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用instanceof"}},[a._v("#")]),a._v(" 使用instanceof")]),a._v(" "),t("p",[a._v("格式: 对象 instanceof 类名称\n将得到一个布尔值结果,也就是判断前面的对象能不能当做后面类型的实例")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" animal "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 向上转型")]),a._v("\nanimal "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instanceof")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 判断前面的对象能不能当做后面类型的实例")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("实际用处,在传参的时候,不知道会被传进来什么参数,可以直接写成父类,通过多态的形式创建的类,都可以传递进来,"),t("code",[a._v("而且参数会自动向上转型")]),a._v("\n子类对象可以被看做父类")])])}),[],!1,null,null,null);s.default=e.exports}}]);