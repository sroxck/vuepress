(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{817:function(t,s,a){"use strict";a.r(s);var n=a(58),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("hr"),t._v(" "),a("h2",{attrs:{id:"title-ts基础-类型tags-ts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#title-ts基础-类型tags-ts"}},[t._v("#")]),t._v(" title: TS基础-类型\ntags: ts")]),t._v(" "),a("h1",{attrs:{id:"ts基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts基础"}},[t._v("#")]),t._v(" TS基础")]),t._v(" "),a("p",[t._v("为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用")]),t._v(" "),a("h2",{attrs:{id:"布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[t._v("#")]),t._v(" 布尔值")]),t._v(" "),a("p",[a("code",[t._v("let isBool: boolean = false")])]),t._v(" "),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("p",[a("code",[t._v('let isString: string = "字符串"')])]),t._v(" "),a("h2",{attrs:{id:"数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[t._v("#")]),t._v(" 数字")]),t._v(" "),a("p",[a("code",[t._v("let isNumber: number = 100")])]),t._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[t._v("普通形式的数组:"),a("code",[t._v("let isArray: number[] = [1,2,3]")]),a("br"),t._v("\n泛型形式的数组:"),a("code",[t._v("let isArray: Array<number> = [1,2,3]")])]),t._v(" "),a("h2",{attrs:{id:"对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),a("p",[t._v("普通对象:"),a("code",[t._v("let isObj1:{} = {any:333}")]),a("br"),t._v("\n限制属性名和类型:"),a("code",[t._v("let isObj2:{size:string} = {size:'22'}")])]),t._v(" "),a("h2",{attrs:{id:"任意类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意类型"}},[t._v("#")]),t._v(" 任意类型")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("使用any类型后,值可以为任意类型,在不知道具体类型的时候可以使用,尽量不使用any类型")])]),t._v(" "),a("p",[t._v("使用any类型,值可以为数字或者字符串或者其他任意类型"),a("br"),t._v(" "),a("code",[t._v('let isAny: any = "33"')]),a("br"),t._v(" "),a("code",[t._v("let isAnyTwo: any = 333")]),a("br"),t._v("\n数组使用any类型后,数组中每一项元素值可为任意类型"),a("br"),t._v(" "),a("code",[t._v("let isAnyArray:any[] = [1,'1',false]")])]),t._v(" "),a("h2",{attrs:{id:"元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[t._v("#")]),t._v(" 元组")]),t._v(" "),a("p",[t._v("元组最重要的特性是可以限制数组元素的个数和类型，它特别适合用来实现多值返回"),a("br"),t._v("\n元组,表示一个已知类型和数量的数组,如下例:isTuple数组只能有2个元素,类型是String,Number,类型顺序也必须一致"),a("br"),t._v(" "),a("code",[t._v("let isTuple : [string, number] = ['2',3]")])]),t._v(" "),a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),a("p",[t._v("数字类型枚举可以手动设置起始索引,后面的值自动++,如果字符串枚举和数字枚举混用,所有元素都需要手动设置"),a("br"),t._v(" "),a("code",[t._v("enum Color {red = 1,pink,black}")]),a("br"),t._v(" "),a("code",[t._v("let c: Color = Color.pink // c = 2")])]),t._v(" "),a("h2",{attrs:{id:"空值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空值"}},[t._v("#")]),t._v(" 空值")]),t._v(" "),a("p",[t._v("空值 void,函数如果没有返回值可以设置,变量设置没有意义,因为赋值只能设置undefined和null"),a("br"),t._v(" "),a("code",[t._v("function returnVoid():void{}")])]),t._v(" "),a("h2",{attrs:{id:"联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[t._v("#")]),t._v(" 联合类型")]),t._v(" "),a("p",[t._v("可以为一个变量指定多个类型,类型于或的关系"),a("br"),t._v(" "),a("code",[t._v("let lhlx: number|null = null")])]),t._v(" "),a("h2",{attrs:{id:"函数返回值类型设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数返回值类型设置"}},[t._v("#")]),t._v(" 函数返回值类型设置")]),t._v(" "),a("p",[t._v("函数返回值类型格式: 写在参数列表括号之后"),a("br"),t._v(" "),a("code",[t._v('function returnString():string{return "string"}')]),a("br"),t._v(" "),a("code",[t._v("let isNull: null= null")])]),t._v(" "),a("h2",{attrs:{id:"never类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#never类型"}},[t._v("#")]),t._v(" never类型")]),t._v(" "),a("p",[t._v("返回never类型的函数必须有永远无法到达的终点,如异常")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("returnNever")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("never"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被异常中断")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),a("p",[t._v("函数参数是对象 除了指定的参数,传入其他参数报错")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nameHaha")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("params"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传入一个对象,对象中除了a和b外还有其他值会报错,可以使用索引签名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("函数参数解构 除了指定的参数,传入其他参数报错")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nameGaga")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[t._v("#")]),t._v(" 箭头函数")]),t._v(" "),a("p",[a("code",[t._v("let fn :(name:string)=>string=(ss)=>ss")])]),t._v(" "),a("h2",{attrs:{id:"类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[t._v("#")]),t._v(" 类型断言")]),t._v(" "),a("p",[t._v("当你知道类型是什么的时候,通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。类型是any 但是我知道他实际是String"),a("br"),t._v(" "),a("code",[t._v('let stringLength: any = "hello";')]),a("br"),t._v("\n类似是制类型转换(强制转换需要先转换到特定格式,后面有讲),有以下两种格式"),a("br"),t._v(" "),a("code",[t._v("let stringLengthNuber1: number = (<string>stringLength).length")]),a("br"),t._v(" "),a("code",[t._v("let stringLengthNuber2: number = (stringLength as string).length")])])])}),[],!1,null,null,null);s.default=r.exports}}]);